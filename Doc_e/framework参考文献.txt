Microsoft社がリリースしている、ソフトウェア開発スイート。Visual C++やVisual Basicをはじめとした、複数のプログラミング言語に対応したソフトウェア開発ツールの詰め合わせになっている。

また、Visual Studioが最初から対応しているプログラミング言語のほかに、サードパーティが独自に特定のプログラミング言語をVisual Studioの開発環境に対応させることも可能で、既にPerlなどの言語については対応パッケージがリリースされている。

Visual Studioで作成したソフトウェアはMSILというバイトコードの一種で出力され、動作させるには.NET Framework(厳密にはそれに含まれるCLR)が必要になる。

ただし、Visual C++だけは従来のWindows用プログラムと同じバイナリ形式での出力ができるため、ハードウェアに直接命令を与えるようなプログラムの作成も可能になっている。

なお、Visual Studioの大規模開発業務向けバージョンには、開発環境本体のほかに、テスト環境となるOSやソースコード管理用ソフトウェアも含まれている。



MSIL
Microsoft .NET環境で使用される、実行可能コードを記述するための中間言語。MSILはプログラミング言語の一種で、実行する段階で共通動作環境(CLR：Common Language Runtime)がMSIL形式からマイクロプロセッサが理解できるネイティブ形式に変換する。当初は「CIL」(Common Intermediate Language)と呼ばれていた。

MSILは開発言語に依存せず、開発言語からMSILへのコンパイラさえ用意すれば、どのような言語でもMSIL形式のプログラムを作成できる。ちなみに、MSILは「架空のマイクロプロセッサのネイティブコード」といった体裁をとっており、MSILの直接記述やMSILの逆アセンブルも可能である。




Microsoft .NET対応アプリケーションの動作環境。クラスライブラリの集合体という形で提供される。

.NET対応アプリケーションソフトは、コンパイル時に.NET Framework用の中間コード(「MSIL」と呼ばれる)に変換され、.NET Frameworkのランタイムが中間コードを再コンパイルし、OSごとのネイティブコードに変換して動作する。

したがって、.NET対応アプリケーションは、.NET Frameworkがインストールされている環境であれば、OSなどに依存せず動作することができる。

Java仮想マシンに近い性格を持つが、.NET Framework自体は特定の開発言語に依存しない。Microsoft社が提供する主要な開発言語であるVisual Basic/C++/C#などのほか、サードパーティがこれ以外の開発言語を.NET Frameworkに対応させることもできる。

.NET Frameworkはランタイムとして動作するため、.NET対応アプリケーションを動作させる環境では必ずインストールが必要になる。Windows 98/NT 4.0以降のWindowsに対して.NET Frameworkが用意されるが、この他のOS上で動作する.NET Frameworkを作成することも可能とされている。


http://www.atmarkit.co.jp/ait/articles/1211/16/news093.html
